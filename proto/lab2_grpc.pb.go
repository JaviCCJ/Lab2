// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Lab2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RebeldesClient is the client API for Rebeldes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RebeldesClient interface {
	PedirInfo(ctx context.Context, in *MensajeRebeldes, opts ...grpc.CallOption) (Rebeldes_PedirInfoClient, error)
}

type rebeldesClient struct {
	cc grpc.ClientConnInterface
}

func NewRebeldesClient(cc grpc.ClientConnInterface) RebeldesClient {
	return &rebeldesClient{cc}
}

func (c *rebeldesClient) PedirInfo(ctx context.Context, in *MensajeRebeldes, opts ...grpc.CallOption) (Rebeldes_PedirInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rebeldes_ServiceDesc.Streams[0], "/grpc.rebeldes/pedirInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &rebeldesPedirInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rebeldes_PedirInfoClient interface {
	Recv() (*PedidoData, error)
	grpc.ClientStream
}

type rebeldesPedirInfoClient struct {
	grpc.ClientStream
}

func (x *rebeldesPedirInfoClient) Recv() (*PedidoData, error) {
	m := new(PedidoData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RebeldesServer is the server API for Rebeldes service.
// All implementations must embed UnimplementedRebeldesServer
// for forward compatibility
type RebeldesServer interface {
	PedirInfo(*MensajeRebeldes, Rebeldes_PedirInfoServer) error
	mustEmbedUnimplementedRebeldesServer()
}

// UnimplementedRebeldesServer must be embedded to have forward compatible implementations.
type UnimplementedRebeldesServer struct {
}

func (UnimplementedRebeldesServer) PedirInfo(*MensajeRebeldes, Rebeldes_PedirInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PedirInfo not implemented")
}
func (UnimplementedRebeldesServer) mustEmbedUnimplementedRebeldesServer() {}

// UnsafeRebeldesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RebeldesServer will
// result in compilation errors.
type UnsafeRebeldesServer interface {
	mustEmbedUnimplementedRebeldesServer()
}

func RegisterRebeldesServer(s grpc.ServiceRegistrar, srv RebeldesServer) {
	s.RegisterService(&Rebeldes_ServiceDesc, srv)
}

func _Rebeldes_PedirInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MensajeRebeldes)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RebeldesServer).PedirInfo(m, &rebeldesPedirInfoServer{stream})
}

type Rebeldes_PedirInfoServer interface {
	Send(*PedidoData) error
	grpc.ServerStream
}

type rebeldesPedirInfoServer struct {
	grpc.ServerStream
}

func (x *rebeldesPedirInfoServer) Send(m *PedidoData) error {
	return x.ServerStream.SendMsg(m)
}

// Rebeldes_ServiceDesc is the grpc.ServiceDesc for Rebeldes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rebeldes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.rebeldes",
	HandlerType: (*RebeldesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "pedirInfo",
			Handler:       _Rebeldes_PedirInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/lab2.proto",
}

// CombineClient is the client API for Combine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombineClient interface {
	SubirInfo(ctx context.Context, in *MensajeCombine, opts ...grpc.CallOption) (*Conf, error)
}

type combineClient struct {
	cc grpc.ClientConnInterface
}

func NewCombineClient(cc grpc.ClientConnInterface) CombineClient {
	return &combineClient{cc}
}

func (c *combineClient) SubirInfo(ctx context.Context, in *MensajeCombine, opts ...grpc.CallOption) (*Conf, error) {
	out := new(Conf)
	err := c.cc.Invoke(ctx, "/grpc.combine/subirInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombineServer is the server API for Combine service.
// All implementations must embed UnimplementedCombineServer
// for forward compatibility
type CombineServer interface {
	SubirInfo(context.Context, *MensajeCombine) (*Conf, error)
	mustEmbedUnimplementedCombineServer()
}

// UnimplementedCombineServer must be embedded to have forward compatible implementations.
type UnimplementedCombineServer struct {
}

func (UnimplementedCombineServer) SubirInfo(context.Context, *MensajeCombine) (*Conf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubirInfo not implemented")
}
func (UnimplementedCombineServer) mustEmbedUnimplementedCombineServer() {}

// UnsafeCombineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombineServer will
// result in compilation errors.
type UnsafeCombineServer interface {
	mustEmbedUnimplementedCombineServer()
}

func RegisterCombineServer(s grpc.ServiceRegistrar, srv CombineServer) {
	s.RegisterService(&Combine_ServiceDesc, srv)
}

func _Combine_SubirInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeCombine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServer).SubirInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.combine/subirInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServer).SubirInfo(ctx, req.(*MensajeCombine))
	}
	return interceptor(ctx, in, info, handler)
}

// Combine_ServiceDesc is the grpc.ServiceDesc for Combine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Combine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.combine",
	HandlerType: (*CombineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subirInfo",
			Handler:    _Combine_SubirInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lab2.proto",
}

// NameDataClient is the client API for NameData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameDataClient interface {
	SacarInfo(ctx context.Context, in *PedidoData, opts ...grpc.CallOption) (*PedidoData, error)
}

type nameDataClient struct {
	cc grpc.ClientConnInterface
}

func NewNameDataClient(cc grpc.ClientConnInterface) NameDataClient {
	return &nameDataClient{cc}
}

func (c *nameDataClient) SacarInfo(ctx context.Context, in *PedidoData, opts ...grpc.CallOption) (*PedidoData, error) {
	out := new(PedidoData)
	err := c.cc.Invoke(ctx, "/grpc.nameData/sacarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameDataServer is the server API for NameData service.
// All implementations must embed UnimplementedNameDataServer
// for forward compatibility
type NameDataServer interface {
	SacarInfo(context.Context, *PedidoData) (*PedidoData, error)
	mustEmbedUnimplementedNameDataServer()
}

// UnimplementedNameDataServer must be embedded to have forward compatible implementations.
type UnimplementedNameDataServer struct {
}

func (UnimplementedNameDataServer) SacarInfo(context.Context, *PedidoData) (*PedidoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SacarInfo not implemented")
}
func (UnimplementedNameDataServer) mustEmbedUnimplementedNameDataServer() {}

// UnsafeNameDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameDataServer will
// result in compilation errors.
type UnsafeNameDataServer interface {
	mustEmbedUnimplementedNameDataServer()
}

func RegisterNameDataServer(s grpc.ServiceRegistrar, srv NameDataServer) {
	s.RegisterService(&NameData_ServiceDesc, srv)
}

func _NameData_SacarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameDataServer).SacarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.nameData/sacarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameDataServer).SacarInfo(ctx, req.(*PedidoData))
	}
	return interceptor(ctx, in, info, handler)
}

// NameData_ServiceDesc is the grpc.ServiceDesc for NameData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.nameData",
	HandlerType: (*NameDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sacarInfo",
			Handler:    _NameData_SacarInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lab2.proto",
}
